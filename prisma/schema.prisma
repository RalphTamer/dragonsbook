// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
    id             String           @id @default(cuid())
    type           String
    name           String
    qr             String?
    pointsAdded    Int
    createdAt      DateTime         @default(now())
    UserAttendance UserAttendance[]
}

// model Post {
//     id        Int      @id @default(autoincrement())
//     name      String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     createdBy   User   @relation(fields: [createdById], references: [id])
//     createdById String

//     @@index([name])
// }
model UserAttendance {
    id            String   @id @default(cuid())
    userId        String
    attendedUser  User     @relation(fields: [userId], references: [id])
    eventId       String
    attendedEvent Event    @relation(fields: [eventId], references: [id])
    createdAt     DateTime @default(now())
}

model User {
    id                       String                     @id @default(cuid())
    username                 String                     @unique
    email                    String                     @unique
    role                     String
    password                 String
    image                    String?
    fullname                 String
    dateOfBirth              DateTime
    phoneNumber              String
    instagramHandle          String?
    address                  String?
    accounts                 Account[]
    sessions                 Session[]
    title                    String
    earthPoints              Int                        @default(0)
    windPoints               Int                        @default(0)
    waterPoints              Int                        @default(0)
    firePoints               Int                        @default(0)
    totalPoints              Int                        @default(0)
    UserAttendance           UserAttendance[]
    // @@index([totalPoints , id])
    UserAcquiredSpecialBadge UserAcquiredSpecialBadge[]
    createdAt                DateTime                   @default(now())
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model UserPasswordReset {
    email     String   @id
    token     String
    createdAt DateTime @default(now())
}

model SpecialBadge {
    id                      String                     @id @default(cuid())
    title                   String
    content                 String
    image                   String
    year                    Int
    UserAquiredSpecialBadge UserAcquiredSpecialBadge[]
    createdAt               DateTime                   @default(now())
}

model UserAcquiredSpecialBadge {
    id           String       @id @default(cuid())
    userId       String
    attendedUser User         @relation(fields: [userId], references: [id])
    badgeId      String
    specialBadge SpecialBadge @relation(fields: [badgeId], references: [id])
    createdAt    DateTime     @default(now())
}

model Popup {
    id        String   @id @default(cuid())
    day       Int
    month     String
    title     String
    content   String
    link      String
    createdAt DateTime @default(now())
}
